{"version":3,"sources":["profile_img.png","AppHeader.js","PostsHeader.js","ToDosHeader.js","ProfileCard.js","LoadPosts.js","LoadToDos.js","UserDetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppHeader","className","PostsHeader","to","activeClassName","ToDosHeader","props","ProfileCard","onClick","getDetails","profile","src","profile_img","alt","name","email","website","phone","LoadPosts","post","title","body","LoadToDos","status","todos","completed","UserDetails","details","company","catchPhrase","bs","address","street","suite","city","zipcode","getPost","getToDos","App","state","profiles","userDetails","userPosts","userToDos","displayLoader","getDerailedUser","a","userId","id","url","fetch","then","res","json","response","setState","catch","error","console","log","message","getPostsOfUser","users","getToDosOfUser","this","ok","getInitialProfiles","profileJsx","map","key","JSXUserDetail","detail","JSXUserPosts","JSXUserTodos","exact","path","style","padding","component","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.facedb39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile_img.0c186373.png\";","import React from 'react'\nimport './AppHeader.css'\n\nfunction AppHeader(){\n    return (\n        <header className=\"App-header\">\n            <h1>\n                React Navigation \n            </h1>\n            \n        </header>\n    )\n}\n\nexport default AppHeader","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './Header.css';\n\n\nfunction PostsHeader(){\n    return (\n        <header className=\"App-header\">\n            <nav>\n                <NavLink to=\"/\" activeClassName=\"active\" className=\"navLinks\">Home</NavLink> { '  or  ' }\n                <NavLink to=\"/userToDos\" className=\"navLinks\">To Do</NavLink>\n            </nav>\n        </header>\n        \n    )\n}\n\nexport default PostsHeader","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './Header.css';\n\n\nfunction ToDosHeader(props){\n    return (\n        <header className=\"App-header\">\n            <nav>\n                <NavLink to=\"/\" activeClassName=\"active\" className=\"navLinks\">Home</NavLink> { '  or  ' }\n                <NavLink to=\"/posts\" className=\"navLinks\">Posts</NavLink>\n            </nav>\n        </header>\n        \n    )\n}\n\nexport default ToDosHeader","import React from 'react'\nimport './ProfileCard.css'\nimport profile_img from './profile_img.png'\nimport { NavLink } from 'react-router-dom'\n\n\nfunction ProfileCard(props){\n\n    return(\n        <NavLink to=\"/userDetails\" onClick={() => props.getDetails(props.profile)}>\n        <div className=\"ProfileCard\"> \n            <div className=\"profile-avatar\">\n                <img src={profile_img} alt=\"profile-img\" />\n            </div>\n            <div className=\"card-body\">\n                <div className=\"left-align\">\n                    <p className=\"Profile-name\"> {props.profile.name} <br/>\n                        <span className=\"profile-login\"> {props.profile.email} </span>\n                    </p>\n                    <p className=\"profile-bio\"> {props.profile.website} / {props.profile.phone}  </p>\n                </div>\n            </div>\n        </div>\n        </NavLink>\n    )\n\n}\n\nexport default ProfileCard","import React from 'react'\nimport './ProfileCard.css'\n\nfunction LoadPosts(props){\n\n    return(\n        <div className=\"ProfileCard\"  > \n            <div className=\"card-body\">\n                <div className=\"left-align\">\n                    <h3>{props.post.title} </h3>\n                    \n                    <p className=\"profile-bio\">{props.post.body}</p>\n                </div>\n\n            </div>\n        </div>\n    )\n\n}\n\nexport default LoadPosts","import React from 'react'\nimport './ProfileCard.css'\n\nfunction LoadToDos(props){\n    let status = \"\"\n    if(props.todos.completed === true){\n        status = \"Done!\"\n    }else{\n        status = \"Not Done Yet!\"\n    }\n    return(\n        <div className=\"ProfileCard\"  > \n            <div className=\"card-body\">\n                <div className=\"left-align\">\n                    <h3>{props.todos.title} </h3>\n                    \n                    <p className=\"profile-bio\">{ status }</p>\n                </div>\n\n            </div>\n        </div>\n    )\n\n}\n\nexport default LoadToDos","import React from 'react'\nimport './ProfileCardDetails.css'\nimport { Link } from 'react-router-dom'\n\nfunction UserDetails(props){\n\n    return(\n        <div className=\"ProfileCardDetails\">\n            <div className=\"card-details-body\">\n                <h2>{props.details.name}</h2>\n                <p className=\"Profile-name\">\n                    <span className=\"profile-login\">{props.details.website}</span>\n                </p>\n                <p className=\"profile-bio\">{props.details.phone}</p>\n                <p className=\"profile-details-company\">\n                    <h3>{ props.details.company.name }</h3>\n                    <p className=\"profile-login\">{ props.details.company.catchPhrase }\n                    <h5>{ props.details.company.bs }</h5>\n                    </p>\n                    \n                </p>\n                <p className=\"card-address\">\n                    {props.details.address.street}<br/>\n                    {props.details.address.suite}<br/>\n                    {props.details.address.city}{ ' - ' }\n                    {props.details.address.zipcode}\n\n                </p>\n            </div>\n            <br/>\n            <div className=\"card-buttons\">\n                <Link to=\"/posts\" onClick={() => props.getPost(props.details)} className=\"load-comment load-btn\">Load Posts</Link>\n                <Link to=\"/userToDos\" onClick={() => props.getToDos(props.details)} className=\"load-posts load-btn\">Load To-do</Link>\n            </div>\n        </div>\n    )\n\n}\n\nexport default UserDetails","import React from 'react';\nimport AppHeader from './AppHeader';\nimport PostsHeader from './PostsHeader';\nimport ToDosHeader from './ToDosHeader';\nimport ProfileCard from './ProfileCard';\nimport LoadPosts from './LoadPosts';\nimport LoadToDos from './LoadToDos';\nimport UserDetails from './UserDetails';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { BrowserRouter ,Route, Switch } from 'react-router-dom'\n// import Spinner from 'native-base '\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    profiles : [],\n    userDetails: [],\n    userPosts : [],\n    userToDos : [],\n    displayLoader : true\n  }\n  \n  getInitialProfiles() {\n    this.setState({displayLoader: false})\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n    .then(res => {\n          if(res.ok){\n            this.setState({ displayLoader : true })\n            return res.json()\n          }else{\n            return \"Something went wrong\"\n          }\n    })\n    .then(profiles => this.setState({ profiles: profiles }))\n    .catch(console.error)\n  }\n  \n  componentDidMount () {\n    this.getInitialProfiles()\n  }\n\n  getDerailedUser = async (profiles) => {\n    const userId = profiles.id\n    let url = `https://jsonplaceholder.typicode.com/users/?id=${userId}`\n    await fetch(url)\n        .then(res => res.json())\n        .then(response =>{\n          this.setState({ userDetails: response })\n        })\n        .catch(error => {\n          console.log(error.message)\n        })\n\n  }\n\n  getPostsOfUser = async (users) => {\n    const userId = users.id\n    let url = `https://jsonplaceholder.typicode.com/posts?userId=${userId}`\n    await fetch(url)\n        .then(res => res.json())\n        .then(response =>{\n          console.log(\" => \" + response)\n          this.setState({ userPosts: response })\n        })\n        .catch(error => {\n          console.log(error.message)\n        })\n  }\n\n  getToDosOfUser = async (users) => {\n    const userId = users.id\n    let url = `https://jsonplaceholder.typicode.com/todos?userId=${userId}`\n    await fetch(url)\n        .then(res => res.json())\n        .then(response =>{\n          console.log(\" => \" + response)\n          this.setState({ userToDos: response })\n        })\n        .catch(error => {\n          console.log(error.message)\n        })\n  }\n\n  render(){\n    \n    const profileJsx = this.state.profiles.map(profile =>\n    (\n      <ProfileCard profile={profile} getPost={this.LoadPosts} getDetails={this.getDerailedUser} key={profile.id}/>\n    ) )\n\n  const JSXUserDetail = this.state.userDetails.map(detail => (\n    <UserDetails key={detail.id} getToDos={this.getToDosOfUser} getPost={this.getPostsOfUser} details={detail} />\n  ))\n\n  const JSXUserPosts =  this.state.userPosts.map(post =>(\n      <LoadPosts key={ post.id } post={post} />\n    ) )\n\n    \n    const JSXUserTodos =  this.state.userToDos.map(todos =>(\n      <LoadToDos key={ todos.id } todos={todos} />\n    ) )\n    return (\n\n      <BrowserRouter>\n        <div className='App'>          \n          <Switch>\n              <Route exact path=\"/\">\n                <AppHeader />\n                {/* {\n                  !this.state.loaded\n                    (<Spinner color=\"cornflowerblue\" />)\n                } */}\n                <main className='profileList' style={{ padding: '2rem'}}>\n                    <CSSTransitionGroup component=\"div\"\n                      transitionName=\"fade\"\n                      transitionAppear={true}\n                      transitionAppearTimeout={200}\n                      transitionEnterTimeout={250}\n                      transitionLeaveTimeout={250}>\n                      {profileJsx}\n                    </CSSTransitionGroup>\n                  </main>\n              </Route>\n              <Route exact path=\"/posts\">\n                <PostsHeader />\n                <main className='profileList' style={{ padding: '2rem'}}>\n                    <CSSTransitionGroup component=\"div\"\n                      transitionName=\"fade\"\n                      transitionAppear={true}\n                      transitionAppearTimeout={200}\n                      transitionEnterTimeout={250}\n                      transitionLeaveTimeout={225}>\n                      {JSXUserPosts}\n                    </CSSTransitionGroup>\n                  </main>\n              </Route>\n              <Route exact path=\"/userDetails\" >\n                <main className='profileList' style={{ padding: '2rem'}}>\n                    <CSSTransitionGroup component=\"div\"\n                      transitionName=\"fade\"\n                      transitionAppear={true}\n                      transitionAppearTimeout={200}\n                      transitionEnterTimeout={250}\n                      transitionLeaveTimeout={225}>\n                      {JSXUserDetail}\n                    </CSSTransitionGroup>\n                  </main>\n              </Route>\n              <Route exact path=\"/userToDos\">\n                <ToDosHeader />\n                <main className='profileList' style={{ padding: '2rem'}}>\n                    <CSSTransitionGroup component=\"div\"\n                      transitionName=\"fade\"\n                      transitionAppear={true}\n                      transitionAppearTimeout={200}\n                      transitionEnterTimeout={250}\n                      transitionLeaveTimeout={225}>\n                      {JSXUserTodos}\n                    </CSSTransitionGroup>\n                  </main>\n              </Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n      \n      \n      \n    )\n  };\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}